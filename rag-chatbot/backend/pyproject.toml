[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "rag-chatbot-backend"
version = "0.1.0"
description = "RAG Chatbot Backend with Multi-DB Support and LangGraph Workflows"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
dependencies = [
    # Web Framework & Server
    "fastapi>=0.109.0",
    "uvicorn>=0.27.0",
    "pydantic>=2.6.0",
    "python-multipart>=0.0.6",
    
    # Database & Storage
    "pymongo>=4.6.0",
    "motor>=3.3.0",
    "sqlalchemy>=2.0.25",
    "psycopg2-binary>=2.9.9",
    "asyncpg>=0.27.0",
    "redis>=5.0.0",
    "neo4j>=5.15.0",
    "chromadb>=0.4.22",
    
    # AI/ML & Language Models
    "langchain>=0.1.0",
    "langchain-core>=0.3.59",
    "langchain-community>=0.0.16",
    "langchain-openai>=0.0.5",
    "langchain-anthropic>=0.1.1",
    "langchain-huggingface>=0.2.0",
    "langgraph>=0.0.26",
    "openai>=1.10.0",
    "anthropic>=0.8.0",
    "groq>=0.4.0",
    "sentence-transformers>=2.2.2",
    "tiktoken>=0.5.2",
    "huggingface_hub[hf_xet]>=0.20.0",
    
    # Visualization & Graph Tools
    "graphviz>=0.20.1",
    "mermaid-cli>=0.1.0",
    "ipython>=8.18.0",
    "jupyter>=1.0.0",
    
    # Document Processing
    "pymupdf>=1.23.8",
    "unstructured>=0.11.0",
    
    # Data Processing
    "pandas>=2.1.0",
    
    # Utilities & Environment
    "python-dotenv>=1.0.0",
    "typing-extensions>=4.9.0",
    "pydantic-settings>=2.1.0",
]

[project.optional-dependencies]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
    "pytest-mock>=3.12.0",
    "pytest-env>=1.1.3",
]

dev = [
    "ruff>=0.3.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    "jupyterlab>=4.0.0",
    "ipykernel>=6.0.0",
    "notebook>=7.0.0",
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=1.25.0",
]

viz = [
    "graphviz>=0.20.1",
    "mermaid-cli>=0.1.0",
    "ipython>=8.18.0",
    "jupyter>=1.0.0",
    "jupyterlab>=4.0.0",
    "matplotlib>=3.8.0",
    "seaborn>=0.13.0",
]

[project.scripts]
rag-chatbot = "app.main:app"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
pythonpath = ["."]
env = [
    "TESTING=1",
    "ENVIRONMENT=test",
]
asyncio_mode = "auto"
addopts = "-v --cov=app --cov-report=term-missing"

[tool.ruff]
# Enable pycodestyle (`E`), Pyflakes (`F`), and import sorting (`I`) codes
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "W",   # pycodestyle warnings
    "ANN", # flake8-annotations
    "S",   # flake8-bandit
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "TCH", # flake8-type-checking
    "RUF", # Ruff-specific rules
    "D",   # pydocstyle
    "DTZ", # flake8-datetimez
    "T20", # flake8-print
    "EM",  # flake8-errmsg
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "PIE", # flake8-pie
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "RUF", # Ruff-specific rules
]

ignore = [
    "ANN101",  # missing-type-self
    "ANN102",  # missing-type-cls
    "ANN401",  # dynamically-typed-expression
    "D100",    # undocumented-public-module
    "D104",    # undocumented-public-package
    "D107",    # undocumented-public-init
    "D203",    # 1-blank-line-before-class
    "D213",    # multi-line-summary-second-line
    "D406",    # section-name-ends-in-newline
    "D407",    # missing-raises-doc
    "D413",    # missing-blank-line-after-last-section
    "E501",    # line-too-long (handled by line-length)
    "PLR0913", # too-many-arguments
    "PLR2004", # magic-value-comparison
    "RUF001",  # ambiguous-unicode-character-string
    "RUF002",  # ambiguous-unicode-character-docstring
    "RUF003",  # ambiguous-unicode-character-comment
    "RUF004",  # implicit-string-literal-concatenation
    "RUF005",  # collection-literal-concatenation
    "RUF006",  # asyncio-dangling-task
    "RUF007",  # mutable-dataclass-default
    "RUF008",  # function-call-in-dataclass-default
    "RUF009",  # function-call-in-tuple-dataclass-default
    "RUF010",  # explicit-string-concatenation
    "RUF011",  # explicit-f-string-type-conversion
    "RUF012",  # mutable-class-default
    "RUF013",  # implicit-optional
    "RUF014",  # duplicate-field
    "RUF015",  # unnecessary-iterable-allocation-for-first-element
    "RUF016",  # unnecessary-dict-comprehension-for-literal
    "RUF017",  # unnecessary-list-comprehension
    "RUF018",  # unnecessary-list-index-lookup
    "RUF019",  # unnecessary-dict-index-lookup
    "RUF020",  # unnecessary-enumerate
    "RUF021",  # parenthesize-chained-operators
    "RUF022",  # unsorted-dunder-all
    "RUF023",  # unsorted-dunder-slots
    "RUF024",  # unsorted-namespace-imports
    "RUF025",  # unsorted-stdlib-imports
    "RUF026",  # unsorted-third-party-imports
    "RUF027",  # unsorted-first-party-imports
    "RUF028",  # unsorted-local-folder-imports
    "RUF029",  # unnecessary-dict-index-lookup
    "RUF030",  # unnecessary-list-index-lookup
]

# Allow autofix for all enabled rules (when `--fix` is used)
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10
target-version = "py310"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["app"]
combine-as-imports = true
force-wrap-aliases = true
lines-after-imports = 2
section-default = "THIRDPARTY"
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "ANN", "PLR2004", "D"]
"app/main.py" = ["E402"]

[tool.ruff.pydantic]
# Allow direct instantiation of Pydantic models
allow-direct-instantiation = true

[tool.ruff.pycodestyle]
max-doc-length = 88

[tool.ruff.pyflakes]
# Allow `raise` from `except` blocks. Use in combination with
# `extend-ignore = ["E722"]` to avoid using bare except.
allow-except-raise = true

[tool.ruff.pytest]
# Allow use of `pytest.fixture` without `@pytest.fixture()` decorator.
allow-fixture-without-decorator = true

[tool.ruff.pyupgrade]
# Keep runtime typing within Python 3.10 bounds.
target-version = "py310"

[tool.ruff.unused-arguments]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = [
    "langchain.*",
    "langgraph.*",
    "pydantic.*",
]
ignore_missing_imports = true
