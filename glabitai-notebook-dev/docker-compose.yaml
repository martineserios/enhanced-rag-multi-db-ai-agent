# GLABITAI GLP-1 Treatment Local Development Database Stack
# Based on MongoDB-centric multi-database architecture from project artifacts

services:
  # =============================================================================
  # PRIMARY DATABASE: MongoDB (GLP-1 Clinical Events, Conversations, AI Insights)
  # =============================================================================
  mongodb:
    image: mongo:7.0
    container_name: glabitai-glp1-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: glabitai
      MONGO_INITDB_ROOT_PASSWORD: dev_password
      MONGO_INITDB_DATABASE: glabitai_glp1_clinical
    volumes:
      - mongodb_data:/data/db
      - ./config/mongodb-init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - glabitai-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # CACHING LAYER: Redis (Performance Optimization)
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: glabitai-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - glabitai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # OPTIONAL: PostgreSQL (Structured Reference Data - Future Phase)
  # =============================================================================
  postgres:
    image: postgres:16-alpine
    container_name: glabitai-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: glabitai_user
      POSTGRES_PASSWORD: secure_password
      POSTGRES_DB: glabitai_reference
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - glabitai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U glabitai_user -d glabitai_reference"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - full-stack  # Only starts with: docker-compose --profile full-stack up

  # =============================================================================
  # OPTIONAL: InfluxDB (Time-Series Metrics - Future Phase)
  # =============================================================================
  influxdb:
    image: influxdb:2.7-alpine
    container_name: glabitai-influxdb
    restart: unless-stopped
    ports:
      - "8086:8086"
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: glabitai
      DOCKER_INFLUXDB_INIT_PASSWORD: secure_password
      DOCKER_INFLUXDB_INIT_ORG: glabitai
      DOCKER_INFLUXDB_INIT_BUCKET: clinical_metrics
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: glabitai_development_token_32_chars
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - glabitai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - full-stack  # Only starts with: docker-compose --profile full-stack up

  # =============================================================================
  # OPTIONAL: Neo4j (Medical Relationship Networks - Future Phase)
  # =============================================================================
  neo4j:
    image: neo4j:5.15-community
    container_name: glabitai-neo4j
    restart: unless-stopped
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      NEO4J_AUTH: neo4j/secure_password
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
    networks:
      - glabitai-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "secure_password", "RETURN 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - full-stack  # Only starts with: docker-compose --profile full-stack up

  # =============================================================================
  # DEVELOPMENT UTILITIES
  # =============================================================================
  # MongoDB Admin Interface (Optional)
  mongo-express:
    image: mongo-express:1.0.2-20
    container_name: glabitai-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: glabitai
      ME_CONFIG_MONGODB_ADMINPASSWORD: dev_password
      ME_CONFIG_MONGODB_URL: mongodb://glabitai:dev_password@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - glabitai-network
    profiles:
      - dev-tools  # Only starts with: docker-compose --profile dev-tools up

  # Redis Admin Interface (Optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: glabitai-redis-commander
    restart: unless-stopped
    ports:
      - "8088:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - glabitai-network
    profiles:
      - dev-tools  # Only starts with: docker-compose --profile dev-tools up

  # =============================================================================
  # JUPYTER NOTEBOOKS
  # =============================================================================
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    container_name: glabitai-jupyter
    restart: unless-stopped
    ports:
      - "8888:8888"
    volumes:
      - .:/home/jovyan/work
      - ./notebooks:/home/jovyan/work/notebooks
      - ./glabitai:/home/jovyan/work/glabitai
    environment:
      - JUPYTER_TOKEN=glabitai
      - GRANT_SUDO=yes
      - CHOWN_HOME=yes
      - CHOWN_HOME_OPTS=-R
    working_dir: /home/jovyan/work
    networks:
      - glabitai-network
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles:
      - dev-tools  # Only starts with: docker-compose --profile dev-tools up

  # =============================================================================
  # TEST DATA INITIALIZATION
  # =============================================================================
  test-data-loader:
    build:
      context: .
      dockerfile: Dockerfile.test-data
    container_name: glabitai-test-data-loader
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - MONGODB_URI=mongodb://glabitai:dev_password@mongodb:27017/
      - MONGODB_DB=glabitai_glp1_clinical
      - REDIS_URL=redis://redis:6379/0
    networks:
      - glabitai-network
    restart: on-failure
    profiles:
      - dev-tools

# =============================================================================
# NETWORKS & VOLUMES
# =============================================================================
networks:
  glabitai-network:
    external: true
    name: glabitai-network

volumes:
  # Primary databases (always created)
  mongodb_data:
    name: glabitai-mongodb-data
  redis_data:
    name: glabitai-redis-data
  
  # Secondary databases (created only with full-stack profile)
  postgres_data:
    name: glabitai-postgres-data
  influxdb_data:
    name: glabitai-influxdb-data
  neo4j_data:
    name: glabitai-neo4j-data
  neo4j_logs:
    name: glabitai-neo4j-logs
  neo4j_import:
    name: glabitai-neo4j-import